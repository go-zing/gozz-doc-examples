<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (20230911.1827)
 -->
<!-- Title: overview02 Pages: 1 -->
<svg width="428pt" height="626pt"
 viewBox="0.00 0.00 428.00 625.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 621.5)">
<title>overview02</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-621.5 424,-621.5 424,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<g id="a_clust1"><a xlink:title="type application struct {&#10; &#160;&#160;&#160;overview02.ServiceHandler&#10; &#160;&#160;&#160;*http.Server&#10;}">
<polygon fill="#f6fff6" stroke="black" stroke-dasharray="1,5" points="103,-501 103,-609.5 403,-609.5 403,-501 103,-501"/>
<text text-anchor="middle" x="253" y="-592.2" font-family="Times,serif" font-size="14.00">github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02</text>
</a>
</g>
</g>
<g id="clust4" class="cluster">
<title>cluster_5</title>
<g id="a_clust4"><a xlink:title="type ServerHandlerImpl struct {&#10; &#160;&#160;&#160;overview02.SqlConn&#10; &#160;&#160;&#160;overview02.Store&#10;}">
<polygon fill="#f6fff6" stroke="black" stroke-dasharray="1,5" points="8,-210.25 8,-318.75 308,-318.75 308,-210.25 8,-210.25"/>
<text text-anchor="middle" x="158" y="-301.45" font-family="Times,serif" font-size="14.00">github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02</text>
</a>
</g>
</g>
<g id="clust3" class="cluster">
<title>cluster_3</title>
<g id="a_clust3"><a xlink:title="type _impl_aop_ServiceHandler struct {&#10; &#160;&#160;&#160;_aop_ServiceHandler overview02._aop_ServiceHandler&#10;}">
<polygon fill="#f6fff6" stroke="black" stroke-dasharray="1,5" points="29,-356 29,-463.75 329,-463.75 329,-356 29,-356"/>
<text text-anchor="middle" x="179" y="-446.45" font-family="Times,serif" font-size="14.00">github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02</text>
</a>
</g>
</g>
<g id="clust6" class="cluster">
<title>cluster_9</title>
<g id="a_clust6"><a xlink:title="type RedisStore struct {&#10; &#160;&#160;&#160;Cmdable redis.Cmdable&#10;}">
<polygon fill="#f6fff6" stroke="black" stroke-dasharray="1,5" points="112,-65.25 112,-173 412,-173 412,-65.25 112,-65.25"/>
<text text-anchor="middle" x="262" y="-155.7" font-family="Times,serif" font-size="14.00">github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02</text>
</a>
</g>
</g>
<!-- 0 -->
<g id="node1" class="node">
<title>0</title>
<g id="a_node1"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02.application">
<polygon fill="#b3cde3" stroke="black" points="293.98,-585 136.03,-585 136.03,-566.25 293.98,-566.25 293.98,-585"/>
<text text-anchor="middle" x="215" y="-569.8" font-family="Times,serif" font-size="16.00">overview02.application</text>
</a>
</g>
</g>
<!-- 2 -->
<g id="node2" class="node">
<title>2</title>
<g id="a_node2"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02.ServiceHandler">
<polygon fill="#fbb4ae" stroke="black" points="203.97,-519 106.03,-519 106.03,-501 203.97,-501 203.97,-519"/>
<text text-anchor="middle" x="155" y="-507.27" font-family="Times,serif" font-size="8.00">overview02.ServiceHandler</text>
</a>
</g>
</g>
<!-- 0&#45;&gt;2 -->
<g id="edge1" class="edge">
<title>0&#45;&gt;2</title>
<path fill="none" stroke="black" d="M206.66,-565.78C196.51,-555.02 179.3,-536.77 167.55,-524.31"/>
<polygon fill="black" stroke="black" points="163.73,-520.25 169.81,-522.77 164.95,-521.55 167.84,-524.62 167.84,-524.62 167.84,-524.62 164.95,-521.55 165.88,-526.47 163.73,-520.25"/>
<g id="a_edge1&#45;label"><a xlink:title="Handler">
<text text-anchor="middle" x="204.5" y="-538.75" font-family="Times,serif" font-size="10.00">Handler</text>
</a>
</g>
</g>
<!-- 1 -->
<g id="node3" class="node">
<title>1</title>
<g id="a_node3"><a xlink:title="net/http.Server">
<polygon fill="#b3cde3" stroke="black" points="276,-519 222,-519 222,-501 276,-501 276,-519"/>
<text text-anchor="middle" x="249" y="-507.27" font-family="Times,serif" font-size="8.00">http.Server</text>
</a>
</g>
</g>
<!-- 0&#45;&gt;1 -->
<g id="edge2" class="edge">
<title>0&#45;&gt;1</title>
<path fill="none" stroke="black" d="M219.73,-565.78C225.27,-555.41 234.54,-538.06 241.16,-525.67"/>
<polygon fill="black" stroke="black" points="243.95,-520.44 243.51,-527.01 243.11,-522.01 241.13,-525.73 241.13,-525.73 241.13,-525.73 243.11,-522.01 238.75,-524.46 243.95,-520.44"/>
<g id="a_edge2&#45;label"><a xlink:title="Server">
<text text-anchor="middle" x="250.38" y="-538.75" font-family="Times,serif" font-size="10.00">*Server</text>
</a>
</g>
</g>
<!-- 3 -->
<g id="node4" class="node">
<title>3</title>
<g id="a_node4"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02._impl_aop_ServiceHandler">
<polygon fill="#b3cde3" stroke="black" points="253.1,-439.25 56.9,-439.25 56.9,-421.25 253.1,-421.25 253.1,-439.25"/>
<text text-anchor="middle" x="155" y="-425.98" font-family="Times,serif" font-size="12.00">overview02._impl_aop_ServiceHandler</text>
</a>
</g>
</g>
<!-- 2&#45;&gt;3 -->
<g id="edge3" class="edge">
<title>2&#45;&gt;3</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M155,-493.53C155,-477.38 155,-452.65 155,-439.75"/>
<polygon fill="none" stroke="black" points="152.9,-493.17 155,-499.17 157.1,-493.17 152.9,-493.17"/>
<g id="a_edge3&#45;label"><a xlink:title="func GetInt(context.Context) (int, error)&#10;func GetString(context.Context) (string, error)">
<text text-anchor="middle" x="179.38" y="-473.5" font-family="Times,serif" font-size="10.00">*implement</text>
</a>
</g>
</g>
<!-- 4 -->
<g id="node5" class="node">
<title>4</title>
<g id="a_node5"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02._aop_ServiceHandler">
<polygon fill="#fbb4ae" stroke="black" points="213.35,-374 96.65,-374 96.65,-356 213.35,-356 213.35,-374"/>
<text text-anchor="middle" x="155" y="-362.27" font-family="Times,serif" font-size="8.00">overview02._aop_ServiceHandler</text>
</a>
</g>
</g>
<!-- 3&#45;&gt;4 -->
<g id="edge4" class="edge">
<title>3&#45;&gt;4</title>
<path fill="none" stroke="black" d="M155,-420.98C155,-411 155,-394 155,-381.54"/>
<polygon fill="black" stroke="black" points="155,-375.69 157.7,-381.69 155,-377.47 155,-381.69 155,-381.69 155,-381.69 155,-377.47 152.3,-381.69 155,-375.69"/>
<g id="a_edge4&#45;label"><a xlink:title="_aop_ServiceHandler">
<text text-anchor="middle" x="199.25" y="-393.75" font-family="Times,serif" font-size="10.00" fill="#aaaaaa">_aop_ServiceHandler</text>
</a>
</g>
</g>
<!-- 5 -->
<g id="node6" class="node">
<title>5</title>
<g id="a_node6"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02.ServerHandlerImpl">
<polygon fill="#b3cde3" stroke="black" points="259.85,-294.25 50.15,-294.25 50.15,-275.5 259.85,-275.5 259.85,-294.25"/>
<text text-anchor="middle" x="155" y="-279.05" font-family="Times,serif" font-size="16.00">overview02.ServerHandlerImpl</text>
</a>
</g>
</g>
<!-- 4&#45;&gt;5 -->
<g id="edge5" class="edge">
<title>4&#45;&gt;5</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M155,-348.46C155,-332.23 155,-307.38 155,-294.41"/>
<polygon fill="none" stroke="black" points="152.9,-348.13 155,-354.13 157.1,-348.13 152.9,-348.13"/>
<g id="a_edge5&#45;label"><a xlink:title="func GetInt(context.Context) (int, error)&#10;func GetString(context.Context) (string, error)">
<text text-anchor="middle" x="179.38" y="-328.5" font-family="Times,serif" font-size="10.00">*implement</text>
</a>
</g>
</g>
<!-- 6 -->
<g id="node7" class="node">
<title>6</title>
<g id="a_node7"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02.SqlConn">
<polygon fill="#fbb4ae" stroke="black" points="118.97,-228.25 45.02,-228.25 45.02,-210.25 118.97,-210.25 118.97,-228.25"/>
<text text-anchor="middle" x="82" y="-216.53" font-family="Times,serif" font-size="8.00">overview02.SqlConn</text>
</a>
</g>
</g>
<!-- 5&#45;&gt;6 -->
<g id="edge6" class="edge">
<title>5&#45;&gt;6</title>
<path fill="none" stroke="black" d="M144.85,-275.03C132.4,-264.18 111.19,-245.69 96.89,-233.23"/>
<polygon fill="black" stroke="black" points="92.52,-229.42 98.82,-231.32 93.86,-230.59 97.04,-233.36 97.04,-233.36 97.04,-233.36 93.86,-230.59 95.27,-235.4 92.52,-229.42"/>
<g id="a_edge6&#45;label"><a xlink:title="Sql">
<text text-anchor="middle" x="128.75" y="-248" font-family="Times,serif" font-size="10.00">Sql</text>
</a>
</g>
</g>
<!-- 8 -->
<g id="node8" class="node">
<title>8</title>
<g id="a_node8"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02.Store">
<polygon fill="#fbb4ae" stroke="black" points="209.1,-228.25 144.9,-228.25 144.9,-210.25 209.1,-210.25 209.1,-228.25"/>
<text text-anchor="middle" x="177" y="-216.53" font-family="Times,serif" font-size="8.00">overview02.Store</text>
</a>
</g>
</g>
<!-- 5&#45;&gt;8 -->
<g id="edge7" class="edge">
<title>5&#45;&gt;8</title>
<path fill="none" stroke="black" d="M158.06,-275.03C161.61,-264.75 167.53,-247.63 171.81,-235.26"/>
<polygon fill="black" stroke="black" points="173.71,-229.77 174.3,-236.32 173.13,-231.45 171.75,-235.44 171.75,-235.44 171.75,-235.44 173.13,-231.45 169.2,-234.56 173.71,-229.77"/>
<g id="a_edge7&#45;label"><a xlink:title="Store">
<text text-anchor="middle" x="177.5" y="-248" font-family="Times,serif" font-size="10.00">Store</text>
</a>
</g>
</g>
<!-- 7 -->
<g id="node9" class="node">
<title>7</title>
<g id="a_node9"><a xlink:title="database/sql.DB">
<polygon fill="#b3cde3" stroke="black" points="105,-148.5 51,-148.5 51,-130.5 105,-130.5 105,-148.5"/>
<text text-anchor="middle" x="78" y="-136.78" font-family="Times,serif" font-size="8.00">sql.DB</text>
</a>
</g>
</g>
<!-- 6&#45;&gt;7 -->
<g id="edge8" class="edge">
<title>6&#45;&gt;7</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M81.2,-202.78C80.37,-186.63 79.1,-161.9 78.44,-149"/>
<polygon fill="none" stroke="black" points="79.09,-202.53 81.49,-208.42 83.28,-202.32 79.09,-202.53"/>
<g id="a_edge8&#45;label"><a xlink:title="func QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)">
<text text-anchor="middle" x="105.38" y="-182.75" font-family="Times,serif" font-size="10.00">*implement</text>
</a>
</g>
</g>
<!-- 9 -->
<g id="node10" class="node">
<title>9</title>
<g id="a_node10"><a xlink:title="github.com/go&#45;zing/gozz&#45;doc&#45;examples/overview02.RedisStore">
<polygon fill="#b3cde3" stroke="black" points="241.1,-148.5 122.9,-148.5 122.9,-130.5 241.1,-130.5 241.1,-148.5"/>
<text text-anchor="middle" x="182" y="-135.22" font-family="Times,serif" font-size="12.00">overview02.RedisStore</text>
</a>
</g>
</g>
<!-- 8&#45;&gt;9 -->
<g id="edge9" class="edge">
<title>8&#45;&gt;9</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M177.99,-202.78C179.03,-186.63 180.62,-161.9 181.45,-149"/>
<polygon fill="none" stroke="black" points="175.92,-202.3 177.63,-208.42 180.11,-202.57 175.92,-202.3"/>
<g id="a_edge9&#45;label"><a xlink:title="func Get(context.Context, string) ([]uint8, error)&#10;func Set(context.Context, string, []uint8, time.Duration) error">
<text text-anchor="middle" x="203.38" y="-182.75" font-family="Times,serif" font-size="10.00">*implement</text>
</a>
</g>
</g>
<!-- 10 -->
<g id="node11" class="node">
<title>10</title>
<g id="a_node11"><a xlink:title="github.com/go&#45;redis/redis/v8.Cmdable">
<polygon fill="#fbb4ae" stroke="black" points="209,-83.25 155,-83.25 155,-65.25 209,-65.25 209,-83.25"/>
<text text-anchor="middle" x="182" y="-71.53" font-family="Times,serif" font-size="8.00">redis.Cmdable</text>
</a>
</g>
</g>
<!-- 9&#45;&gt;10 -->
<g id="edge10" class="edge">
<title>9&#45;&gt;10</title>
<path fill="none" stroke="black" d="M182,-130.23C182,-120.25 182,-103.25 182,-90.79"/>
<polygon fill="black" stroke="black" points="182,-84.94 184.7,-90.94 182,-86.72 182,-90.94 182,-90.94 182,-90.94 182,-86.72 179.3,-90.94 182,-84.94"/>
<g id="a_edge10&#45;label"><a xlink:title="Cmdable">
<text text-anchor="middle" x="200.38" y="-103" font-family="Times,serif" font-size="10.00" fill="#aaaaaa">Cmdable</text>
</a>
</g>
</g>
<!-- 11 -->
<g id="node12" class="node">
<title>11</title>
<g id="a_node12"><a xlink:title="github.com/go&#45;redis/redis/v8.Client">
<polygon fill="#b3cde3" stroke="black" points="209,-18 155,-18 155,0 209,0 209,-18"/>
<text text-anchor="middle" x="182" y="-6.28" font-family="Times,serif" font-size="8.00">redis.Client</text>
</a>
</g>
</g>
<!-- 10&#45;&gt;11 -->
<g id="edge11" class="edge">
<title>10&#45;&gt;11</title>
<path fill="none" stroke="black" stroke-dasharray="5,2" d="M182,-57.61C182,-45.24 182,-28.46 182,-18.47"/>
<polygon fill="none" stroke="black" points="179.9,-57.47 182,-63.47 184.1,-57.47 179.9,-57.47"/>
<g id="a_edge11&#45;label"><a xlink:title="func Append(context.Context, string, string) *redis.IntCmd&#10;func BLMove(context.Context, string, string, string, string, time.Duration) *redis.StringCmd&#10;func BLPop(context.Context, time.Duration, ...string) *redis.StringSliceCmd&#10;func BRPop(context.Context, time.Duration, ...string) *redis.StringSliceCmd&#10;func BRPopLPush(context.Context, string, string, time.Duration) *redis.StringCmd&#10;func BZPopMax(context.Context, time.Duration, ...string) *redis.ZWithKeyCmd&#10;func BZPopMin(context.Context, time.Duration, ...string) *redis.ZWithKeyCmd&#10;func BgRewriteAOF(context.Context) *redis.StatusCmd&#10;func BgSave(context.Context) *redis.StatusCmd&#10;func BitCount(context.Context, string, *redis.BitCount) *redis.IntCmd&#10;func BitField(context.Context, string, ...interface{}) *redis.IntSliceCmd&#10;func BitOpAnd(context.Context, string, ...string) *redis.IntCmd&#10;func BitOpNot(context.Context, string, string) *redis.IntCmd&#10;func BitOpOr(context.Context, string, ...string) *redis.IntCmd&#10;func BitOpXor(context.Context, string, ...string) *redis.IntCmd&#10;func BitPos(context.Context, string, int64, ...int64) *redis.IntCmd&#10;func ClientGetName(context.Context) *redis.StringCmd&#10;func ClientID(context.Context) *redis.IntCmd&#10;func ClientKill(context.Context, string) *redis.StatusCmd&#10;func ClientKillByFilter(context.Context, ...string) *redis.IntCmd&#10;func ClientList(context.Context) *redis.StringCmd&#10;func ClientPause(context.Context, time.Duration) *redis.BoolCmd&#10;func ClusterAddSlots(context.Context, ...int) *redis.StatusCmd&#10;func ClusterAddSlotsRange(context.Context, int, int) *redis.StatusCmd&#10;func ClusterCountFailureReports(context.Context, string) *redis.IntCmd&#10;func ClusterCountKeysInSlot(context.Context, int) *redis.IntCmd&#10;func ClusterDelSlots(context.Context, ...int) *redis.StatusCmd&#10;func ClusterDelSlotsRange(context.Context, int, int) *redis.StatusCmd&#10;func ClusterFailover(context.Context) *redis.StatusCmd&#10;func ClusterForget(context.Context, string) *redis.StatusCmd&#10;func ClusterGetKeysInSlot(context.Context, int, int) *redis.StringSliceCmd&#10;func ClusterInfo(context.Context) *redis.StringCmd&#10;func ClusterKeySlot(context.Context, string) *redis.IntCmd&#10;func ClusterMeet(context.Context, string, string) *redis.StatusCmd&#10;func ClusterNodes(context.Context) *redis.StringCmd&#10;func ClusterReplicate(context.Context, string) *redis.StatusCmd&#10;func ClusterResetHard(context.Context) *redis.StatusCmd&#10;func ClusterResetSoft(context.Context) *redis.StatusCmd&#10;func ClusterSaveConfig(context.Context) *redis.StatusCmd&#10;func ClusterSlaves(context.Context, string) *redis.StringSliceCmd&#10;func ClusterSlots(context.Context) *redis.ClusterSlotsCmd&#10;func Command(context.Context) *redis.CommandsInfoCmd&#10;func ConfigGet(context.Context, string) *redis.SliceCmd&#10;func ConfigResetStat(context.Context) *redis.StatusCmd&#10;func ConfigRewrite(context.Context) *redis.StatusCmd&#10;func ConfigSet(context.Context, string, string) *redis.StatusCmd&#10;func Copy(context.Context, string, string, int, bool) *redis.IntCmd&#10;func DBSize(context.Context) *redis.IntCmd&#10;func DebugObject(context.Context, string) *redis.StringCmd&#10;func Decr(context.Context, string) *redis.IntCmd&#10;func DecrBy(context.Context, string, int64) *redis.IntCmd&#10;func Del(context.Context, ...string) *redis.IntCmd&#10;func Dump(context.Context, string) *redis.StringCmd&#10;func Echo(context.Context, interface{}) *redis.StringCmd&#10;func Eval(context.Context, string, []string, ...interface{}) *redis.Cmd&#10;func EvalSha(context.Context, string, []string, ...interface{}) *redis.Cmd&#10;func Exists(context.Context, ...string) *redis.IntCmd&#10;func Expire(context.Context, string, time.Duration) *redis.BoolCmd&#10;func ExpireAt(context.Context, string, time.Time) *redis.BoolCmd&#10;func ExpireGT(context.Context, string, time.Duration) *redis.BoolCmd&#10;func ExpireLT(context.Context, string, time.Duration) *redis.BoolCmd&#10;func ExpireNX(context.Context, string, time.Duration) *redis.BoolCmd&#10;func ExpireXX(context.Context, string, time.Duration) *redis.BoolCmd&#10;func FlushAll(context.Context) *redis.StatusCmd&#10;func FlushAllAsync(context.Context) *redis.StatusCmd&#10;func FlushDB(context.Context) *redis.StatusCmd&#10;func FlushDBAsync(context.Context) *redis.StatusCmd&#10;func GeoAdd(context.Context, string, ...*redis.GeoLocation) *redis.IntCmd&#10;func GeoDist(context.Context, string, string, string, string) *redis.FloatCmd&#10;func GeoHash(context.Context, string, ...string) *redis.StringSliceCmd&#10;func GeoPos(context.Context, string, ...string) *redis.GeoPosCmd&#10;func GeoRadius(context.Context, string, float64, float64, *redis.GeoRadiusQuery) *redis.GeoLocationCmd&#10;func GeoRadiusByMember(context.Context, string, string, *redis.GeoRadiusQuery) *redis.GeoLocationCmd&#10;func GeoRadiusByMemberStore(context.Context, string, string, *redis.GeoRadiusQuery) *redis.IntCmd&#10;func GeoRadiusStore(context.Context, string, float64, float64, *redis.GeoRadiusQuery) *redis.IntCmd&#10;func GeoSearch(context.Context, string, *redis.GeoSearchQuery) *redis.StringSliceCmd&#10;func GeoSearchLocation(context.Context, string, *redis.GeoSearchLocationQuery) *redis.GeoSearchLocationCmd&#10;func GeoSearchStore(context.Context, string, string, *redis.GeoSearchStoreQuery) *redis.IntCmd&#10;func Get(context.Context, string) *redis.StringCmd&#10;func GetBit(context.Context, string, int64) *redis.IntCmd&#10;func GetDel(context.Context, string) *redis.StringCmd&#10;func GetEx(context.Context, string, time.Duration) *redis.StringCmd&#10;func GetRange(context.Context, string, int64, int64) *redis.StringCmd&#10;func GetSet(context.Context, string, interface{}) *redis.StringCmd&#10;func HDel(context.Context, string, ...string) *redis.IntCmd&#10;func HExists(context.Context, string, string) *redis.BoolCmd&#10;func HGet(context.Context, string, string) *redis.StringCmd&#10;func HGetAll(context.Context, string) *redis.StringStringMapCmd&#10;func HIncrBy(context.Context, string, string, int64) *redis.IntCmd&#10;func HIncrByFloat(context.Context, string, string, float64) *redis.FloatCmd&#10;func HKeys(context.Context, string) *redis.StringSliceCmd&#10;func HLen(context.Context, string) *redis.IntCmd&#10;func HMGet(context.Context, string, ...string) *redis.SliceCmd&#10;func HMSet(context.Context, string, ...interface{}) *redis.BoolCmd&#10;func HRandField(context.Context, string, int, bool) *redis.StringSliceCmd&#10;func HScan(context.Context, string, uint64, string, int64) *redis.ScanCmd&#10;func HSet(context.Context, string, ...interface{}) *redis.IntCmd&#10;func HSetNX(context.Context, string, string, interface{}) *redis.BoolCmd&#10;func HVals(context.Context, string) *redis.StringSliceCmd&#10;func Incr(context.Context, string) *redis.IntCmd&#10;func IncrBy(context.Context, string, int64) *redis.IntCmd&#10;func IncrByFloat(context.Context, string, float64) *redis.FloatCmd&#10;func Info(context.Context, ...string) *redis.StringCmd&#10;func Keys(context.Context, string) *redis.StringSliceCmd&#10;func LIndex(context.Context, string, int64) *redis.StringCmd&#10;func LInsert(context.Context, string, string, interface{}, interface{}) *redis.IntCmd&#10;func LInsertAfter(context.Context, string, interface{}, interface{}) *redis.IntCmd&#10;func LInsertBefore(context.Context, string, interface{}, interface{}) *redis.IntCmd&#10;func LLen(context.Context, string) *redis.IntCmd&#10;func LMove(context.Context, string, string, string, string) *redis.StringCmd&#10;func LPop(context.Context, string) *redis.StringCmd&#10;func LPopCount(context.Context, string, int) *redis.StringSliceCmd&#10;func LPos(context.Context, string, string, redis.LPosArgs) *redis.IntCmd&#10;func LPosCount(context.Context, string, string, int64, redis.LPosArgs) *redis.IntSliceCmd&#10;func LPush(context.Context, string, ...interface{}) *redis.IntCmd&#10;func LPushX(context.Context, string, ...interface{}) *redis.IntCmd&#10;func LRange(context.Context, string, int64, int64) *redis.StringSliceCmd&#10;func LRem(context.Context, string, int64, interface{}) *redis.IntCmd&#10;func LSet(context.Context, string, int64, interface{}) *redis.StatusCmd&#10;func LTrim(context.Context, string, int64, int64) *redis.StatusCmd&#10;func LastSave(context.Context) *redis.IntCmd&#10;func MGet(context.Context, ...string) *redis.SliceCmd&#10;func MSet(context.Context, ...interface{}) *redis.StatusCmd&#10;func MSetNX(context.Context, ...interface{}) *redis.BoolCmd&#10;func MemoryUsage(context.Context, string, ...int) *redis.IntCmd&#10;func Migrate(context.Context, string, string, string, int, time.Duration) *redis.StatusCmd&#10;func Move(context.Context, string, int) *redis.BoolCmd&#10;func ObjectEncoding(context.Context, string) *redis.StringCmd&#10;func ObjectIdleTime(context.Context, string) *redis.DurationCmd&#10;func ObjectRefCount(context.Context, string) *redis.IntCmd&#10;func PExpire(context.Context, string, time.Duration) *redis.BoolCmd&#10;func PExpireAt(context.Context, string, time.Time) *redis.BoolCmd&#10;func PFAdd(context.Context, string, ...interface{}) *redis.IntCmd&#10;func PFCount(context.Context, ...string) *redis.IntCmd&#10;func PFMerge(context.Context, string, ...string) *redis.StatusCmd&#10;func PTTL(context.Context, string) *redis.DurationCmd&#10;func Persist(context.Context, string) *redis.BoolCmd&#10;func Ping(context.Context) *redis.StatusCmd&#10;func Pipeline() redis.Pipeliner&#10;func Pipelined(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)&#10;func PubSubChannels(context.Context, string) *redis.StringSliceCmd&#10;func PubSubNumPat(context.Context) *redis.IntCmd&#10;func PubSubNumSub(context.Context, ...string) *redis.StringIntMapCmd&#10;func Publish(context.Context, string, interface{}) *redis.IntCmd&#10;func Quit(context.Context) *redis.StatusCmd&#10;func RPop(context.Context, string) *redis.StringCmd&#10;func RPopCount(context.Context, string, int) *redis.StringSliceCmd&#10;func RPopLPush(context.Context, string, string) *redis.StringCmd&#10;func RPush(context.Context, string, ...interface{}) *redis.IntCmd&#10;func RPushX(context.Context, string, ...interface{}) *redis.IntCmd&#10;func RandomKey(context.Context) *redis.StringCmd&#10;func ReadOnly(context.Context) *redis.StatusCmd&#10;func ReadWrite(context.Context) *redis.StatusCmd&#10;func Rename(context.Context, string, string) *redis.StatusCmd&#10;func RenameNX(context.Context, string, string) *redis.BoolCmd&#10;func Restore(context.Context, string, time.Duration, string) *redis.StatusCmd&#10;func RestoreReplace(context.Context, string, time.Duration, string) *redis.StatusCmd&#10;func SAdd(context.Context, string, ...interface{}) *redis.IntCmd&#10;func SCard(context.Context, string) *redis.IntCmd&#10;func SDiff(context.Context, ...string) *redis.StringSliceCmd&#10;func SDiffStore(context.Context, string, ...string) *redis.IntCmd&#10;func SInter(context.Context, ...string) *redis.StringSliceCmd&#10;func SInterStore(context.Context, string, ...string) *redis.IntCmd&#10;func SIsMember(context.Context, string, interface{}) *redis.BoolCmd&#10;func SMIsMember(context.Context, string, ...interface{}) *redis.BoolSliceCmd&#10;func SMembers(context.Context, string) *redis.StringSliceCmd&#10;func SMembersMap(context.Context, string) *redis.StringStructMapCmd&#10;func SMove(context.Context, string, string, interface{}) *redis.BoolCmd&#10;func SPop(context.Context, string) *redis.StringCmd&#10;func SPopN(context.Context, string, int64) *redis.StringSliceCmd&#10;func SRandMember(context.Context, string) *redis.StringCmd&#10;func SRandMemberN(context.Context, string, int64) *redis.StringSliceCmd&#10;func SRem(context.Context, string, ...interface{}) *redis.IntCmd&#10;func SScan(context.Context, string, uint64, string, int64) *redis.ScanCmd&#10;func SUnion(context.Context, ...string) *redis.StringSliceCmd&#10;func SUnionStore(context.Context, string, ...string) *redis.IntCmd&#10;func Save(context.Context) *redis.StatusCmd&#10;func Scan(context.Context, uint64, string, int64) *redis.ScanCmd&#10;func ScanType(context.Context, uint64, string, int64, string) *redis.ScanCmd&#10;func ScriptExists(context.Context, ...string) *redis.BoolSliceCmd&#10;func ScriptFlush(context.Context) *redis.StatusCmd&#10;func ScriptKill(context.Context) *redis.StatusCmd&#10;func ScriptLoad(context.Context, string) *redis.StringCmd&#10;func Set(context.Context, string, interface{}, time.Duration) *redis.StatusCmd&#10;func SetArgs(context.Context, string, interface{}, redis.SetArgs) *redis.StatusCmd&#10;func SetBit(context.Context, string, int64, int) *redis.IntCmd&#10;func SetEX(context.Context, string, interface{}, time.Duration) *redis.StatusCmd&#10;func SetNX(context.Context, string, interface{}, time.Duration) *redis.BoolCmd&#10;func SetRange(context.Context, string, int64, string) *redis.IntCmd&#10;func SetXX(context.Context, string, interface{}, time.Duration) *redis.BoolCmd&#10;func Shutdown(context.Context) *redis.StatusCmd&#10;func ShutdownNoSave(context.Context) *redis.StatusCmd&#10;func ShutdownSave(context.Context) *redis.StatusCmd&#10;func SlaveOf(context.Context, string, string) *redis.StatusCmd&#10;func Sort(context.Context, string, *redis.Sort) *redis.StringSliceCmd&#10;func SortInterfaces(context.Context, string, *redis.Sort) *redis.SliceCmd&#10;func SortStore(context.Context, string, string, *redis.Sort) *redis.IntCmd&#10;func StrLen(context.Context, string) *redis.IntCmd&#10;func TTL(context.Context, string) *redis.DurationCmd&#10;func Time(context.Context) *redis.TimeCmd&#10;func Touch(context.Context, ...string) *redis.IntCmd&#10;func TxPipeline() redis.Pipeliner&#10;func TxPipelined(context.Context, func(redis.Pipeliner) error) ([]redis.Cmder, error)&#10;func Type(context.Context, string) *redis.StatusCmd&#10;func Unlink(context.Context, ...string) *redis.IntCmd&#10;func XAck(context.Context, string, string, ...string) *redis.IntCmd&#10;func XAdd(context.Context, *redis.XAddArgs) *redis.StringCmd&#10;func XAutoClaim(context.Context, *redis.XAutoClaimArgs) *redis.XAutoClaimCmd&#10;func XAutoClaimJustID(context.Context, *redis.XAutoClaimArgs) *redis.XAutoClaimJustIDCmd&#10;func XClaim(context.Context, *redis.XClaimArgs) *redis.XMessageSliceCmd&#10;func XClaimJustID(context.Context, *redis.XClaimArgs) *redis.StringSliceCmd&#10;func XDel(context.Context, string, ...string) *redis.IntCmd&#10;func XGroupCreate(context.Context, string, string, string) *redis.StatusCmd&#10;func XGroupCreateConsumer(context.Context, string, string, string) *redis.IntCmd&#10;func XGroupCreateMkStream(context.Context, string, string, string) *redis.StatusCmd&#10;func XGroupDelConsumer(context.Context, string, string, string) *redis.IntCmd&#10;func XGroupDestroy(context.Context, string, string) *redis.IntCmd&#10;func XGroupSetID(context.Context, string, string, string) *redis.StatusCmd&#10;func XInfoConsumers(context.Context, string, string) *redis.XInfoConsumersCmd&#10;func XInfoGroups(context.Context, string) *redis.XInfoGroupsCmd&#10;func XInfoStream(context.Context, string) *redis.XInfoStreamCmd&#10;func XInfoStreamFull(context.Context, string, int) *redis.XInfoStreamFullCmd&#10;func XLen(context.Context, string) *redis.IntCmd&#10;func XPending(context.Context, string, string) *redis.XPendingCmd&#10;func XPendingExt(context.Context, *redis.XPendingExtArgs) *redis.XPendingExtCmd&#10;func XRange(context.Context, string, string, string) *redis.XMessageSliceCmd&#10;func XRangeN(context.Context, string, string, string, int64) *redis.XMessageSliceCmd&#10;func XRead(context.Context, *redis.XReadArgs) *redis.XStreamSliceCmd&#10;func XReadGroup(context.Context, *redis.XReadGroupArgs) *redis.XStreamSliceCmd&#10;func XReadStreams(context.Context, ...string) *redis.XStreamSliceCmd&#10;func XRevRange(context.Context, string, string, string) *redis.XMessageSliceCmd&#10;func XRevRangeN(context.Context, string, string, string, int64) *redis.XMessageSliceCmd&#10;func XTrim(context.Context, string, int64) *redis.IntCmd&#10;func XTrimApprox(context.Context, string, int64) *redis.IntCmd&#10;func XTrimMaxLen(context.Context, string, int64) *redis.IntCmd&#10;func XTrimMaxLenApprox(context.Context, string, int64, int64) *redis.IntCmd&#10;func XTrimMinID(context.Context, string, string) *redis.IntCmd&#10;func XTrimMinIDApprox(context.Context, string, string, int64) *redis.IntCmd&#10;func ZAdd(context.Context, string, ...*redis.Z) *redis.IntCmd&#10;func ZAddArgs(context.Context, string, redis.ZAddArgs) *redis.IntCmd&#10;func ZAddArgsIncr(context.Context, string, redis.ZAddArgs) *redis.FloatCmd&#10;func ZAddCh(context.Context, string, ...*redis.Z) *redis.IntCmd&#10;func ZAddNX(context.Context, string, ...*redis.Z) *redis.IntCmd&#10;func ZAddNXCh(context.Context, string, ...*redis.Z) *redis.IntCmd&#10;func ZAddXX(context.Context, string, ...*redis.Z) *redis.IntCmd&#10;func ZAddXXCh(context.Context, string, ...*redis.Z) *redis.IntCmd&#10;func ZCard(context.Context, string) *redis.IntCmd&#10;func ZCount(context.Context, string, string, string) *redis.IntCmd&#10;func ZDiff(context.Context, ...string) *redis.StringSliceCmd&#10;func ZDiffStore(context.Context, string, ...string) *redis.IntCmd&#10;func ZDiffWithScores(context.Context, ...string) *redis.ZSliceCmd&#10;func ZIncr(context.Context, string, *redis.Z) *redis.FloatCmd&#10;func ZIncrBy(context.Context, string, float64, string) *redis.FloatCmd&#10;func ZIncrNX(context.Context, string, *redis.Z) *redis.FloatCmd&#10;func ZIncrXX(context.Context, string, *redis.Z) *redis.FloatCmd&#10;func ZInter(context.Context, *redis.ZStore) *redis.StringSliceCmd&#10;func ZInterStore(context.Context, string, *redis.ZStore) *redis.IntCmd&#10;func ZInterWithScores(context.Context, *redis.ZStore) *redis.ZSliceCmd&#10;func ZLexCount(context.Context, string, string, string) *redis.IntCmd&#10;func ZMScore(context.Context, string, ...string) *redis.FloatSliceCmd&#10;func ZPopMax(context.Context, string, ...int64) *redis.ZSliceCmd&#10;func ZPopMin(context.Context, string, ...int64) *redis.ZSliceCmd&#10;func ZRandMember(context.Context, string, int, bool) *redis.StringSliceCmd&#10;func ZRange(context.Context, string, int64, int64) *redis.StringSliceCmd&#10;func ZRangeArgs(context.Context, redis.ZRangeArgs) *redis.StringSliceCmd&#10;func ZRangeArgsWithScores(context.Context, redis.ZRangeArgs) *redis.ZSliceCmd&#10;func ZRangeByLex(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd&#10;func ZRangeByScore(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd&#10;func ZRangeByScoreWithScores(context.Context, string, *redis.ZRangeBy) *redis.ZSliceCmd&#10;func ZRangeStore(context.Context, string, redis.ZRangeArgs) *redis.IntCmd&#10;func ZRangeWithScores(context.Context, string, int64, int64) *redis.ZSliceCmd&#10;func ZRank(context.Context, string, string) *redis.IntCmd&#10;func ZRem(context.Context, string, ...interface{}) *redis.IntCmd&#10;func ZRemRangeByLex(context.Context, string, string, string) *redis.IntCmd&#10;func ZRemRangeByRank(context.Context, string, int64, int64) *redis.IntCmd&#10;func ZRemRangeByScore(context.Context, string, string, string) *redis.IntCmd&#10;func ZRevRange(context.Context, string, int64, int64) *redis.StringSliceCmd&#10;func ZRevRangeByLex(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd&#10;func ZRevRangeByScore(context.Context, string, *redis.ZRangeBy) *redis.StringSliceCmd&#10;func ZRevRangeByScoreWithScores(context.Context, string, *redis.ZRangeBy) *redis.ZSliceCmd&#10;func ZRevRangeWithScores(context.Context, string, int64, int64) *redis.ZSliceCmd&#10;func ZRevRank(context.Context, string, string) *redis.IntCmd&#10;func ZScan(context.Context, string, uint64, string, int64) *redis.ScanCmd&#10;func ZScore(context.Context, string, string) *redis.FloatCmd&#10;func ZUnion(context.Context, redis.ZStore) *redis.StringSliceCmd&#10;func ZUnionStore(context.Context, string, *redis.ZStore) *redis.IntCmd&#10;func ZUnionWithScores(context.Context, redis.ZStore) *redis.ZSliceCmd">
<text text-anchor="middle" x="206.38" y="-37.75" font-family="Times,serif" font-size="10.00">*implement</text>
</a>
</g>
</g>
</g>
</svg>
