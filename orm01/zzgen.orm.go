// Code generated by gozz:orm github.com/go-zing/gozz. DO NOT EDIT.

package orm01

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

var (
	_ = (*context.Context)(nil)
	_ = (*json.RawMessage)(nil)
	_ = (*time.Time)(nil)
	_ = (*sql.NullString)(nil)
)

var tables = []interface{}{
	CurrentDeptEmp{},
	Departments{},
	DeptEmp{},
	DeptEmpLatestDate{},
	DeptManager{},
	Employees{},
	Salaries{},
	Titles{},
}

// employees.current_dept_emp
// VIEW
const TableCurrentDeptEmp = "current_dept_emp"

type CurrentDeptEmp struct {
	// emp_no : int
	EmpNo int
	// dept_no : char(4)
	DeptNo string
	// from_date : NULLABLE date
	FromDate interface{}
	// to_date : NULLABLE date
	ToDate interface{}
}

func (CurrentDeptEmp) TableName() string { return TableCurrentDeptEmp }

func (m *CurrentDeptEmp) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["dept_no"] = &m.DeptNo
	dst["from_date"] = &m.FromDate
	dst["to_date"] = &m.ToDate
}

type SliceCurrentDeptEmp []CurrentDeptEmp

func (s *SliceCurrentDeptEmp) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, CurrentDeptEmp{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.departments
const TableDepartments = "departments"

type Departments struct {
	// dept_no : char(4)
	DeptNo string
	// dept_name : varchar(40)
	DeptName string
}

func (Departments) TableName() string { return TableDepartments }

func (m *Departments) FieldMapping(dst map[string]interface{}) {
	dst["dept_no"] = &m.DeptNo
	dst["dept_name"] = &m.DeptName
}

type SliceDepartments []Departments

func (s *SliceDepartments) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, Departments{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.dept_emp
const TableDeptEmp = "dept_emp"

type DeptEmp struct {
	// emp_no : int
	EmpNo int
	// dept_no : char(4)
	DeptNo string
	// from_date : date
	FromDate interface{}
	// to_date : date
	ToDate interface{}
}

func (DeptEmp) TableName() string { return TableDeptEmp }

func (m *DeptEmp) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["dept_no"] = &m.DeptNo
	dst["from_date"] = &m.FromDate
	dst["to_date"] = &m.ToDate
}

type SliceDeptEmp []DeptEmp

func (s *SliceDeptEmp) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, DeptEmp{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.dept_emp_latest_date
// VIEW
const TableDeptEmpLatestDate = "dept_emp_latest_date"

type DeptEmpLatestDate struct {
	// emp_no : int
	EmpNo int
	// from_date : NULLABLE date
	FromDate interface{}
	// to_date : NULLABLE date
	ToDate interface{}
}

func (DeptEmpLatestDate) TableName() string { return TableDeptEmpLatestDate }

func (m *DeptEmpLatestDate) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["from_date"] = &m.FromDate
	dst["to_date"] = &m.ToDate
}

type SliceDeptEmpLatestDate []DeptEmpLatestDate

func (s *SliceDeptEmpLatestDate) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, DeptEmpLatestDate{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.dept_manager
const TableDeptManager = "dept_manager"

type DeptManager struct {
	// emp_no : int
	EmpNo int
	// dept_no : char(4)
	DeptNo string
	// from_date : date
	FromDate interface{}
	// to_date : date
	ToDate interface{}
}

func (DeptManager) TableName() string { return TableDeptManager }

func (m *DeptManager) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["dept_no"] = &m.DeptNo
	dst["from_date"] = &m.FromDate
	dst["to_date"] = &m.ToDate
}

type SliceDeptManager []DeptManager

func (s *SliceDeptManager) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, DeptManager{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.employees
const TableEmployees = "employees"

type Employees struct {
	// emp_no : int
	EmpNo int
	// birth_date : date
	BirthDate interface{}
	// first_name : varchar(14)
	FirstName string
	// last_name : varchar(16)
	LastName string
	// gender : enum('M','F')
	Gender string
}

func (Employees) TableName() string { return TableEmployees }

func (m *Employees) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["birth_date"] = &m.BirthDate
	dst["first_name"] = &m.FirstName
	dst["last_name"] = &m.LastName
	dst["gender"] = &m.Gender
}

type SliceEmployees []Employees

func (s *SliceEmployees) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, Employees{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.salaries
const TableSalaries = "salaries"

type Salaries struct {
	// emp_no : int
	EmpNo int
	// salary : int
	Salary int
	// from_date : date
	FromDate interface{}
	// to_date : date
	ToDate interface{}
}

func (Salaries) TableName() string { return TableSalaries }

func (m *Salaries) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["salary"] = &m.Salary
	dst["from_date"] = &m.FromDate
	dst["to_date"] = &m.ToDate
}

type SliceSalaries []Salaries

func (s *SliceSalaries) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, Salaries{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}

// employees.titles
const TableTitles = "titles"

type Titles struct {
	// emp_no : int
	EmpNo int
	// title : varchar(50)
	Title string
	// from_date : date
	FromDate interface{}
	// to_date : NULLABLE date
	ToDate interface{}
}

func (Titles) TableName() string { return TableTitles }

func (m *Titles) FieldMapping(dst map[string]interface{}) {
	dst["emp_no"] = &m.EmpNo
	dst["title"] = &m.Title
	dst["from_date"] = &m.FromDate
	dst["to_date"] = &m.ToDate
}

type SliceTitles []Titles

func (s *SliceTitles) Iterate(f func(interface{}, bool) bool) {
	for i := 0; ; i++ {
		if c := i >= len(*s); !c {
			if !f(&(*s)[i], c) {
				return
			}
		} else if n := append(*s, Titles{}); f(&n[i], c) {
			*s = n
		} else {
			*s = n[:i]
			return
		}
	}
}
